<?xml version="1.0"?>
<!--
+++++++++++++++++++++++++++++++++++++++++++
title     Apache Ant Build Script         +
project   icecore-hashids                 +
file      build.xml                       +
version   0.0.0                           +
author    Arctic Ice Studio               +
email     development@arcticicestudio.com +
copyright Copyright (C) 2016              +
created   2016-06-05 17:23 UTC+0200       +
modified  2016-06-05 17:26 UTC+0200       +
+++++++++++++++++++++++++++++++++++++++++++

[Description]
Apache Ant Build Script of the "IceCore - Hashids" project.
Based on the Apache Ant Build Script skeleton of the "Glacier - Apache Ant" project (glacier-apache-ant@0.11.0).

[Index]
  (1) Initialization
    (1.0) External Property Files
      (1.0.0) Build Main
      (1.0.1) Build Secure
    (1.1) Environment Property
    (1.2) External Tasks
    (1.3) Classpath
      (1.3.0) main.java
      (1.3.1) test.java
      (1.3.2) scratch.java
    (1.4) Project Information Splash
  (2) Assembly
    (2.0) assemble
    (2.1) assemble-jar-binary
      (2.1.0) Consistency Validation
      (2.1.1) Generator Configuration
      (2.1.2) Classpath Configuration
      (2.1.3) JAR Library Generation
      (2.1.4) MD5 Generation
    (2.2) assemble-jar-sources
      (2.2.0) Consistency Validation
      (2.2.1) Generator Configuration
      (2.2.2) JAR Library Generation
      (2.2.3) MD5 Generation
    (2.3) assemble-targz-sources
      (2.3.0) Consistency Validation
      (2.3.1) Generator Configuration
      (2.3.2) Archive Generation
      (2.3.3) MD5 Generation
    (2.4) assemble-targz-repository
      (2.4.0) Generator Configuration
      (2.4.1) Archive Generation
      (2.4.2) MD5 Generation
  (3) Distribution
    (3.0) distribute
      (3.0.0) Assembly Consistency Validation
      (3.0.1) Generator Configuration
      (3.0.2) Binary Package Archive Generation
      (3.0.3) Sources Package Archive Generation
      (3.0.4) JavaDoc Package Archive Generation
      (3.0.5) Source Archive Copying
      (3.0.6) MD5 Generation
      (3.0.7) GPG Signing
  (4) Documentation
    (4.0) javadoc
      (4.0.0) Javadoc Generation
      (4.0.1) Javadoc JAR Generation
      (4.0.2) MD5 Generation
  (5) Signing
    (5.0) sign-assembly-jar
      (5.0.0) JAR Signing
      (5.0.1) MD5 Generation
    (5.1) sign-assembly-jar-gpg
    (5.2) sign-assembly-targz-gpg
  (6) Building
    (6.0) build
    (6.1) build-test
    (6.2) build-scratch
    (6.3) rebuild
    (6.4) rebuild-test
    (6.5) rebuild-scratch
  (7) Copying
    (7.0) copy-dependencies
    (7.1) copy-resources
    (7.2) copy-native
    (7.3) copy-assets
    (7.4) copy-test-resources
    (7.5) copy-test-native
    (7.6) copy-test-assets
    (7.7) copy-scratch-resources
    (7.8) copy-scratch-native
    (7.9) copy-scratch-assets
  (8) Testing
    (8.0) test-java-junit
  (9) Cleaning
    (9.0) clean-all
    (9.1) clean
    (9.2) clean-java
    (9.3) clean-native
    (9.4) clean-resources
    (9.5) clean-assets
    (9.6) clean-test
    (9.7) clean-test-java
    (9.8) clean-test-native
    (9.9) clean-test-resources
    (9.10) clean-test-assets
    (9.11) clean-scratch
    (9.12) clean-scratch-java
    (9.13) clean-scratch-native
    (9.14) clean-scratch-resources
    (9.15) clean-scratch-assets

[Dependencies]
Development
  - junit@4.12 (http://junit.org)
  - hamcrest-core@1.3 (http://hamcrest.org)
  Skeletons
    - glacier-apache-ant@0.11.0 (https://github.com/arcticicestudio/glacier-apache-ant)
Production
  Engines
    - ant@1.9.6 (http://ant.apache.org)

[Copyright]
Copyright (C) 2016 Arctic Ice Studio <development@arcticicestudio.com>

[References]
Apache Ant Documentation
  (https://ant.apache.org/manual/)
Glacier Apache Ant Project
  (https://github.com/arcticicestudio/glacier-apache-ant)
-->
<project name="icecore-hashids" basedir="." default="init" xmlns:if="ant:if" xmlns:unless="ant:unless">
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Initialization - init                                                  [1] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Default task which loads
     - external property files
     - environment variables
     - external task defintions
     - classpaths
     and shows a project information splash

     @since 0.0.0
    -->
  <target name="init" description="Loads necessary properties and definitions to initialize this buildfile [default]">
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Initialization - init - External Property Files                      [1.0] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Initialization - init - External Property Files - Build Main       [1.0.0] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <loadproperties srcFile="build.properties"/>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [1.0.0]-+ -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Initialization - init - External Property Files - Build Secure     [1.0.1] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <loadproperties srcFile="build-secure.properties"/>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [1.0.1]-+ -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [1.0]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Initialization - init - Environment Property                         [1.1] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <property environment="env"/>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [1.1]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Initialization - init - External Tasks                               [1.2] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [1.2]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Initialization - init - Classpath                                    [1.3] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Initialization - init - Classpath - main                           [1.3.0] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <path id="classpath.main">
      <pathelement location="${build.main.java}"/>
      <fileset dir="${lib.main.java}">
        <include name="*.jar"/>
        <exclude name="*sources.jar"/>
        <exclude name="*javadoc.jar"/>
      </fileset>
      <fileset dir="${lib.main.java.vendor}">
        <include name="*.jar"/>
        <exclude name="*sources.jar"/>
        <exclude name="*javadoc.jar"/>
      </fileset>
    </path>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [1.3.0]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Initialization - init - Classpath - test                           [1.3.1] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <path id="classpath.test">
      <path refid="classpath.main"/>
      <pathelement location="${build.test.java}"/>
      <fileset dir="${lib.test.java}">
        <include name="*.jar"/>
        <exclude name="*sources.jar"/>
        <exclude name="*javadoc.jar"/>
      </fileset>
      <fileset dir="${lib.test.java.vendor}">
        <include name="*.jar"/>
        <exclude name="*sources.jar"/>
        <exclude name="*javadoc.jar"/>
      </fileset>
    </path>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [1.3.1]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Initialization - init - Classpath - scratch                        [1.3.2] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <path id="classpath.scratch">
      <pathelement location="${build.scratch.java}"/>
      <fileset dir="${lib.scratch.java}">
        <include name="*.jar"/>
        <exclude name="*sources.jar"/>
        <exclude name="*javadoc.jar"/>
      </fileset>
      <fileset dir="${lib.scratch.java.vendor}">
        <include name="*.jar"/>
        <exclude name="*sources.jar"/>
        <exclude name="*javadoc.jar"/>
      </fileset>
    </path>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [1.3.2]-+ -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [1.3]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Initialization - init - Project Information Splash                   [1.4] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo message="Project: ${project.name}" level="info"/>
    <echo message="Version: ${project.version}" level="info"/>
    <echo message="Base Directory: ${basedir}" level="info"/>
    <echo message="Build File: ${ant.file}" level="info"/>
    <echo message="JDK: ${ant.java.version}" level="info"/>
    <echo message="Ant: ${ant.version} (${ant.home})" level="info"/>
    <echo message="OS: ${os.name} ${os.version} ${os.arch}" level="info"/>
    <echo message="User: ${user.name}" level="info"/>
    <echo message="Invoked Targets: ${ant.project.invoked-targets}" level="info"/>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [1.4]-+ -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [1]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Assembly                                                               [2] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Assembly - assemble                                                  [2.0] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Assembles the latest version packages based on the specified configurations.
     This is a collection task which calls dependent tasks in a specific order.
     There are configuration properties for this task to enable or disable the generation of specific assemblies.

     @since 0.0.0
     -->
  <target
    name="assemble"
    depends="init,rebuild,copy-dependencies,assemble-jar-binary,assemble-jar-sources,assemble-targz-sources,assemble-targz-repository"
    description="Assembles the latest version packages based on the specified configurations">
    <echo message="Assembling latest version packages based on the specified configurations"/>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.0]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Assembly - assemble-jar-binary                                       [2.1] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <!--
    Assembles the latest version binary JAR library including all specified project and
    information files, native binaries, and resources and creates a MD5 checksum file.

    @since 0.0.0
    -->
  <target name="assemble-jar-binary" depends="init,rebuild,copy-dependencies" description="Assembles the latest version binary JAR library">
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Assembly - assemble-jar-binary - Consistency Validation            [2.1.0] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <!-- Assets (optional) -->
    <condition property="hasMainAssetsSourcesFolder">
      <available type="dir" searchparents="false" file="${src.main.assets}"/>
    </condition>

    <!-- Natives (optional) -->
    <condition property="hasMainNativeSourcesFolder">
      <available type="dir" searchparents="false" file="${src.main.native}"/>
    </condition>

    <!-- Resources (optional) -->
    <condition property="hasMainResourcesSourcesFolder">
      <available type="dir" searchparents="false" file="${src.main.resources}"/>
    </condition>

    <!-- Base Project Assets (required) -->
    <condition property="hasBaseProjectAssets">
      <and>
        <available type="file" searchparents="false" file="README.md"/>
        <available type="file" searchparents="false" file="CHANGELOG.md"/>
      </and>
    </condition>
    <fail unless:set="hasBaseProjectAssets" message="No base project assets available"/>

    <!-- Optional Project Assets (optional) -->
    <condition property="hasOptionalProjectAssets">
      <or>
        <available type="file" searchparents="false" file="COPYRIGHT.md"/>
        <available type="file" searchparents="false" file="LICENSE.md"/>
      </or>
    </condition>

    <!-- Base Odin Project Development Assets -->
    <condition property="hasBaseOdinProjectDevelopmentAssets">
      <and>
        <istrue value="${config.assembly.odin}"/>
        <available type="file" searchparents="false" file="odin.json"/>
      </and>
    </condition>

    <!-- Assembly Dependencies Prefix Configuration (required) -->
    <condition property="hasAssemblyDependenciesPrefixConfiguration">
      <isset property="assembly.dependencies.prefix"/>
    </condition>
    <fail unless:set="hasAssemblyDependenciesPrefixConfiguration" message="No assembly dependencies prefix configuration"/>

    <!-- Classpath Configuration (optional) -->
    <condition property="hasClasspathConfiguration">
      <isset property="config.classpath.manifest"/>
    </condition>

    <!-- Manifest Classpath Configuration (optional) -->
    <condition property="hasManifestClasspathConfiguration">
      <istrue value="config.manifest.useClasspath"/>
    </condition>

    <!-- Manifest Package Version Information (required) -->
    <condition property="hasManifestPackageVersionInformation">
      <and>
        <isset property="config.manifest.package.spec.title"/>
        <isset property="config.manifest.package.spec.version"/>
        <isset property="config.manifest.package.spec.vendor"/>
        <isset property="config.manifest.package.impl.title"/>
        <isset property="config.manifest.package.impl.version"/>
        <isset property="config.manifest.package.impl.vendor"/>
        <isset property="config.manifest.package.name"/>
      </and>
    </condition>
    <fail unless:set="hasManifestPackageVersionInformation" message="No manifest package version information configured"/>

    <!-- Manifest Application Information (required) -->
    <condition property="hasManifestApplicationInformation">
      <isset property="config.manifest.application.builder"/>
    </condition>
    <fail unless:set="hasManifestApplicationInformation" message="No manifest application information configured"/>

    <!-- Manifest Execution Information (optional) -->
    <condition property="hasManifestExecutionMainClass">
      <isset property="config.manifest.execution.mainclass"/>
    </condition>

    <!-- Manifest Security (Signed) Information (optional) -->
    <!-- Permissions -->
    <condition property="hasManifestSecurityPermissions">
      <isset property="config.manifest.security.permissions"/>
    </condition>
    <!-- Codebase -->
    <condition property="hasManifestSecurityCodebase">
      <isset property="config.manifest.security.codebase"/>
    </condition>
    <!-- Application-Name -->
    <condition property="hasManifestSecurityName">
      <isset property="config.manifest.security.name"/>
    </condition>
    <!-- Application-Library-Allowable-Codebase -->
    <condition property="hasManifestSecurityCodebaseAllowedhost">
      <isset property="config.manifest.security.codebase.allowedhost"/>
    </condition>
    <!-- Caller-Allowable-Codebase -->
    <condition property="hasManifestSecurityCodebaseAllowedcaller">
      <isset property="config.manifest.security.codebase.allowedcaller"/>
    </condition>
    <!-- Entry-Point -->
    <condition property="hasManifestSecurityEntrypoints">
      <isset property="config.manifest.security.entrypoints"/>
    </condition>
    <!-- Trusted-Only -->
    <condition property="hasManifestSecurityTrustonly">
      <isset property="config.manifest.security.trustonly"/>
    </condition>
    <!-- Trusted-Library -->
    <condition property="hasManifestSecurityTrustlibrary">
      <isset property="config.manifest.security.trustlibrary"/>
    </condition>
    <!-- Manifest Third-Party (optional) -->
    <condition property="hasManifestThirdPartyEclipseSourceBundle">
      <isset property="config.manifest.optional.eclipse.sourcebundle"/>
    </condition>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.1.0]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble-jar-binary - Generator Configuration           [2.1.1] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <condition property="assembleBinaryJARLibrary">
      <istrue value="${config.assembly.generation.jar.library}"/>
    </condition>
    <echo message="Assembling ${project.name} ${project.version}"/>

    <mkdir dir="${assembly}/${project.version}"/>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.1.1]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble-jar-binary - Classpath Configuration           [2.1.2] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <!-- Manifest Classpath Mapper -->
    <pathconvert unless:set="config.classpath.manifest" property="classpath.manifest" pathsep=" " setonempty="false">
      <path refid="classpath.main" />
      <mapper>
        <chainedmapper>
          <flattenmapper />
          <globmapper from="*.jar" to="${assembly.dependencies.prefix}/*.jar" />
        </chainedmapper>
      </mapper>
    </pathconvert>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.1.2]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble-jar-binary - JAR Library Generation            [2.1.3] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo if:set="assembleBinaryJARLibrary" message="Processing files for binary JAR library"/>
    <jar if:set="assembleBinaryJARLibrary" destfile="${assembly}/${project.version}/${project.name}-${project.version}.jar" basedir="${build.main.java}">

      <!-- Manifest (required) -->
      <manifest>
        <attribute if:set="hasManifestApplicationInformation" name="Built-By" value="${config.manifest.application.builder}"/>
        <section name="${config.manifest.package.name}">
          <attribute if:set="hasManifestPackageVersionInformation" name="Specification-Title" value="${config.manifest.package.spec.title}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Specification-Version" value="${config.manifest.package.spec.version}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Specification-Vendor" value="${config.manifest.package.spec.vendor}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Implementation-Title" value="${config.manifest.package.impl.title}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Implementation-Version" value="${config.manifest.package.impl.version}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Implementation-Vendor" value="${config.manifest.package.impl.vendor}"/>
        </section>
        <attribute if:set="hasManifestExecutionMainClass" name="Main-Class" value="${config.manifest.execution.mainclass}"/>
        <attribute if:set="hasClasspathConfiguration" name="Class-Path" value="${config.classpath.manifest}"/>
        <attribute if:set="classpath.manifest" name="Class-Path" value="${classpath.manifest}"/>
        <attribute if:set="hasManifestSecurityPermissions" name="Permissions" value="${config.manifest.security.permissions}"/>
        <attribute if:set="hasManifestSecurityCodebase" name="Codebase" value="${config.manifest.security.codebase}"/>
        <attribute if:set="hasManifestSecurityName" name="Application-Name" value="${config.manifest.security.name}"/>
        <attribute if:set="hasManifestSecurityCodebaseAllowedhost" name="Application-Library-Allowable-Codebase" value="${config.manifest.security.codebase.allowedhost}"/>
        <attribute if:set="hasManifestSecurityCodebaseAllowedcaller" name="Caller-Allowable-Codebase" value="${config.manifest.security.codebase.allowedcaller}"/>
        <attribute if:set="hasManifestSecurityEntrypoints" name="Entry-Point" value="${config.manifest.security.entrypoints}"/>
        <attribute if:set="hasManifestSecurityTrustonly" name="Trusted-Only" value="${config.manifest.security.trustonly}"/>
        <attribute if:set="hasManifestSecurityTrustlibrary" name="Trusted-Library" value="${config.manifest.security.trustlibrary}"/>
      </manifest>

      <!-- Assets (optional) -->
      <zipfileset dir="${build.main.assets}" prefix="assets">
        <include name="**/*"/>
      </zipfileset>

      <!-- Natives (optional) -->
      <zipfileset dir="${build.main.native}" prefix="native">
        <include name="**/*"/>
      </zipfileset>

      <!-- Resources (optional) -->
      <zipfileset dir="${build.main.resources}" prefix="resources">
        <include name="**/*"/>
      </zipfileset>

      <!-- Base Project Assets (required)-->
      <fileset if:set="hasBaseProjectAssets" dir="${basedir}">
        <include name="README.md"/>
        <include name="CHANGELOG.md"/>
      </fileset>

      <!-- Optional Project Assets (optional)-->
      <fileset if:set="hasOptionalProjectAssets" dir="${basedir}">
        <include name="COPYRIGHT.md"/>
        <include name="LICENSE.md"/>
      </fileset>

      <!-- Base Odin Project Development Assets (required)-->
      <fileset if:set="hasBaseOdinProjectDevelopmentAssets" dir="${basedir}">
        <include name="odin.json"/>
      </fileset>
    </jar>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.1.3]-+ -->

    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Assembly - assemble-jar-binary - MD5 Generation                    [2.1.4] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo message="Generating MD5 checksum"/>
    <checksum fileext=".md5">
      <filelist dir="${assembly}/${project.version}">
        <file if:set="assembleBinaryJARLibrary" name="${project.name}-${project.version}.jar"/>
      </filelist>
    </checksum>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.1.4]-+ -->
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.1]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Assembly - assemble-jar-sources                                      [2.2] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Assembles the latest version sources JAR library including all specified project- and
     information files and creates a MD5 checksum file.

     @since 0.0.0
     -->
  <target name="assemble-jar-sources" depends="init" description="Assembles the latest version sources JAR library">
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Assembly - assemble-jar-sources - Consistency Validation           [2.2.0] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <!-- Java Sources (required) -->
    <condition property="hasMainJavaSourcesFolder">
      <available type="dir" searchparents="false" file="${src.main.java}"/>
    </condition>
    <fail unless:set="hasMainJavaSourcesFolder" message="No main java sources available or invalid configuration"/>

    <!-- Base Project Assets (required) -->
    <condition property="hasBaseProjectAssets">
      <and>
        <available type="file" searchparents="false" file="README.md"/>
        <available type="file" searchparents="false" file="CHANGELOG.md"/>
      </and>
    </condition>
    <fail unless:set="hasBaseProjectAssets" message="No base project assets available"/>

    <!-- Optional Project Assets (optional) -->
    <condition property="hasOptionalProjectAssets">
      <or>
        <available type="file" searchparents="false" file="COPYRIGHT.md"/>
        <available type="file" searchparents="false" file="LICENSE.md"/>
      </or>
    </condition>

    <!-- Base Odin Project Development Assets -->
    <condition property="hasBaseOdinProjectDevelopmentAssets">
      <and>
        <istrue value="${config.assembly.odin}"/>
        <available type="file" searchparents="false" file="odin.json"/>
      </and>
    </condition>

    <!-- Manifest Package Version Information (required) -->
    <condition property="hasManifestPackageVersionInformation">
      <and>
        <isset property="config.manifest.package.spec.title"/>
        <isset property="config.manifest.package.spec.version"/>
        <isset property="config.manifest.package.spec.vendor"/>
        <isset property="config.manifest.package.impl.title"/>
        <isset property="config.manifest.package.impl.version"/>
        <isset property="config.manifest.package.impl.vendor"/>
        <isset property="config.manifest.package.name"/>
      </and>
    </condition>
    <fail unless:set="hasManifestPackageVersionInformation" message="No manifest package version information configured"/>

    <!-- Manifest Application Information (required) -->
    <condition property="hasManifestApplicationInformation">
      <isset property="config.manifest.application.builder"/>
    </condition>
    <fail unless:set="hasManifestApplicationInformation" message="No manifest application information configured"/>

    <!-- Manifest Security (Signed) Information (optional) -->
    <!-- Permissions -->
    <condition property="hasManifestSecurityPermissions">
      <isset property="config.manifest.security.permissions"/>
    </condition>
    <!-- Codebase -->
    <condition property="hasManifestSecurityCodebase">
      <isset property="config.manifest.security.codebase"/>
    </condition>
    <!-- Application-Name -->
    <condition property="hasManifestSecurityName">
      <isset property="config.manifest.security.name"/>
    </condition>
    <!-- Application-Library-Allowable-Codebase -->
    <condition property="hasManifestSecurityCodebaseAllowedhost">
      <isset property="config.manifest.security.codebase.allowedhost"/>
    </condition>
    <!-- Caller-Allowable-Codebase -->
    <condition property="hasManifestSecurityCodebaseAllowedcaller">
      <isset property="config.manifest.security.codebase.allowedcaller"/>
    </condition>
    <!-- Entry-Point -->
    <condition property="hasManifestSecurityEntrypoints">
      <isset property="config.manifest.security.entrypoints"/>
    </condition>
    <!-- Trusted-Only -->
    <condition property="hasManifestSecurityTrustonly">
      <isset property="config.manifest.security.trustonly"/>
    </condition>
    <!-- Trusted-Library -->
    <condition property="hasManifestSecurityTrustlibrary">
      <isset property="config.manifest.security.trustlibrary"/>
    </condition>
    <!-- Manifest Third-Party (optional) -->
    <condition property="hasManifestThirdPartyEclipseSourceBundle">
      <isset property="config.manifest.optional.eclipse.sourcebundle"/>
    </condition>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.2.0]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble-jar-sources - Generator Configuration          [2.2.1] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <condition property="assembleSourcesJARLibrary">
      <istrue value="${config.assembly.generation.jar.sources}"/>
    </condition>
    <echo message="Assembling ${project.name} ${project.version}"/>

    <mkdir dir="${assembly}/${project.version}"/>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.2.1]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble-jar-sources - JAR Library Generation           [2.2.2] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo if:set="assembleSourcesJARLibrary" message="Processing files for sources JAR library"/>
    <jar if:set="assembleSourcesJARLibrary" destfile="${assembly}/${project.version}/${project.name}-${project.version}-sources.jar" basedir="${src.main.java}">

      <!-- Manifest (required) -->
      <manifest>
        <attribute if:set="hasManifestApplicationInformation" name="Built-By" value="${config.manifest.application.builder}"/>
        <section name="${config.manifest.package.name}">
          <attribute if:set="hasManifestPackageVersionInformation" name="Specification-Title" value="${config.manifest.package.spec.title}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Specification-Version" value="${config.manifest.package.spec.version}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Specification-Vendor" value="${config.manifest.package.spec.vendor}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Implementation-Title" value="${config.manifest.package.impl.title}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Implementation-Version" value="${config.manifest.package.impl.version}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Implementation-Vendor" value="${config.manifest.package.impl.vendor}"/>
        </section>
        <attribute if:set="hasManifestThirdPartyEclipseSourceBundle" name="Eclipse-SourceBundle" value="${config.manifest.optional.eclipse.sourcebundle}"/>
        <attribute if:set="hasManifestSecurityPermissions" name="Permissions" value="${config.manifest.security.permissions}"/>
        <attribute if:set="hasManifestSecurityCodebase" name="Codebase" value="${config.manifest.security.codebase}"/>
        <attribute if:set="hasManifestSecurityName" name="Application-Name" value="${config.manifest.security.name}"/>
        <attribute if:set="hasManifestSecurityCodebaseAllowedhost" name="Application-Library-Allowable-Codebase" value="${config.manifest.security.codebase.allowedhost}"/>
        <attribute if:set="hasManifestSecurityCodebaseAllowedcaller" name="Caller-Allowable-Codebase" value="${config.manifest.security.codebase.allowedcaller}"/>
        <attribute if:set="hasManifestSecurityEntrypoints" name="Entry-Point" value="${config.manifest.security.entrypoints}"/>
        <attribute if:set="hasManifestSecurityTrustonly" name="Trusted-Only" value="${config.manifest.security.trustonly}"/>
        <attribute if:set="hasManifestSecurityTrustlibrary" name="Trusted-Library" value="${config.manifest.security.trustlibrary}"/>
      </manifest>

      <!-- Base Project Assets (required)-->
      <fileset if:set="hasBaseProjectAssets" dir="${basedir}">
        <include name="README.md"/>
        <include name="CHANGELOG.md"/>
      </fileset>

      <!-- Optional Project Assets (optional)-->
      <fileset if:set="hasOptionalProjectAssets" dir="${basedir}">
        <include name="COPYRIGHT.md"/>
        <include name="LICENSE.md"/>
      </fileset>

      <!-- Base Odin Project Development Assets (required)-->
      <fileset if:set="hasBaseOdinProjectDevelopmentAssets" dir="${basedir}">
        <include name="odin.json"/>
      </fileset>
    </jar>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.2.2]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble-jar-sources - MD5 Generation                   [2.2.3] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo message="Generating MD5 checksum"/>
    <checksum fileext=".md5">
      <filelist dir="${assembly}/${project.version}">
        <file if:set="assembleSourcesJARLibrary" name="${project.name}-${project.version}-sources.jar"/>
      </filelist>
    </checksum>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.2.3]-+ -->
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.2]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Assembly - assemble-targz-sources                                    [2.3] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Assembles the latest version sources archive including all specified project- and
     information files and creates a MD5 checksum file.

     @since 0.0.0
     -->
  <target name="assemble-targz-sources" depends="init" description="Assembles the latest version sources archive">
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Assembly - assemble-targz-sources - Consistency Validation         [2.3.0] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <!-- Java Sources (required) -->
    <condition property="hasMainJavaSourcesFolder">
      <available type="dir" searchparents="false" file="${src.main.java}"/>
    </condition>
    <condition property="hasTestJavaSourcesFolder">
      <available type="dir" searchparents="false" file="${src.test.java}"/>
    </condition>
    <fail unless:set="hasMainJavaSourcesFolder" message="No main java sources available or invalid configuration"/>
    <fail unless:set="hasTestJavaSourcesFolder" message="No test java sources available or invalid configuration"/>

    <!-- Assets (optional) -->
    <condition property="hasMainAssetsSourcesFolder">
      <available type="dir" searchparents="false" file="${src.main.assets}"/>
    </condition>
    <condition property="hasTestAssetsSourcesFolder">
      <available type="dir" searchparents="false" file="${src.test.assets}"/>
    </condition>

    <!-- Natives (optional) -->
    <condition property="hasMainNativeSourcesFolder">
      <available type="dir" searchparents="false" file="${src.main.native}"/>
    </condition>
    <condition property="hasTestNativeSourcesFolder">
      <available type="dir" searchparents="false" file="${src.test.native}"/>
    </condition>

    <!-- Resources (optional) -->
    <condition property="hasMainResourcesSourcesFolder">
      <available type="dir" searchparents="false" file="${src.main.resources}"/>
    </condition>
    <condition property="hasTestResourcesSourcesFolder">
      <available type="dir" searchparents="false" file="${src.test.resources}"/>
    </condition>

    <!-- IntelliJ IDEA Project (optional) -->
    <condition property="isIntelliJIDEAProject">
      <or>
        <istrue value="${config.assembly.ide.intellij}"/>
        <available type="dir" searchparents="false" file=".idea"/>
        <available type="file" searchparents="false" file="*.iml"/>
      </or>
    </condition>

    <!-- Eclipse Project (optional) -->
    <condition property="isEclipseProject">
      <and>
        <istrue value="${config.assembly.ide.eclipse}"/>
        <available type="file" searchparents="false" file=".classpath"/>
        <available type="file" searchparents="false" file=".project"/>
      </and>
    </condition>

    <!-- Base Project Assets (required) -->
    <condition property="hasBaseProjectAssets">
      <and>
        <available type="file" searchparents="false" file="README.md"/>
        <available type="file" searchparents="false" file="CHANGELOG.md"/>
      </and>
    </condition>
    <fail unless:set="hasBaseProjectAssets" message="No base project assets available"/>

    <!-- Optional Project Assets (optional) -->
    <condition property="hasOptionalProjectAssets">
      <or>
        <available type="file" searchparents="false" file="COPYRIGHT.md"/>
        <available type="file" searchparents="false" file="LICENSE.md"/>
      </or>
    </condition>

    <!-- Base Project Development Assets (required) -->
    <condition property="hasBaseProjectDevelopmentAssets">
      <and>
        <available type="file" searchparents="false" file="build.properties"/>
        <available type="file" searchparents="false" file="build.xml"/>
        <available type="file" searchparents="false" file=".gitattributes"/>
        <available type="file" searchparents="false" file=".gitignore"/>
      </and>
    </condition>
    <fail unless:set="hasBaseProjectDevelopmentAssets" message="No base project development assets available or invalid configuration"/>

    <!-- Base Odin Project Development Assets -->
    <condition property="hasBaseOdinProjectDevelopmentAssets">
      <and>
        <istrue value="${config.assembly.odin}"/>
        <available type="file" searchparents="false" file="odin.json"/>
      </and>
    </condition>

    <!-- Optional Odin Project Development Assets (optional) -->
    <condition property="hasOptionalOdinProjectDevelopmentAssets">
      <and>
        <istrue value="${config.assembly.odin}"/>
        <available type="file" searchparents="false" file="repository.assk"/>
      </and>
    </condition>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.3.0]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble-targz-sources - Generator Configuration        [2.3.1] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <condition property="assembleSourcesArchive">
      <istrue value="${config.assembly.generation.archive.sources}"/>
    </condition>
    <echo message="Assembling ${project.name} ${project.version}"/>

    <mkdir dir="${assembly}/${project.version}"/>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.3.1]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble-targz-sources - Archive Generation             [2.3.2] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo if:set="assembleSourcesArchive" message="Processing files for the Sources Archive"/>
    <tar if:set="assembleSourcesArchive" destfile="${assembly}/${project.version}/${project.name}-${project.version}-src.tar.gz" compression="gzip">
      <!-- Java Sources (required) -->
      <tarfileset if:set="hasMainJavaSourcesFolder" dir="${src.main.java}" prefix="src/main/java"/>
      <tarfileset if:set="hasTestJavaSourcesFolder" dir="${src.test.java}" prefix="src/test/java"/>

      <!-- Assets (optional) -->
      <tarfileset if:set="hasMainAssetsSourcesFolder" dir="${src.main.assets}" prefix="src/main/assets"/>
      <tarfileset if:set="hasTestAssetsSourcesFolder" dir="${src.test.assets}" prefix="src/test/assets"/>

      <!-- Natives (optional) -->
      <tarfileset if:set="hasMainNativeSourcesFolder" dir="${src.main.native}" prefix="src/main/native"/>
      <tarfileset if:set="hasTestNativeSourcesFolder" dir="${src.test.native}" prefix="src/test/native"/>

      <!-- Resources (optional) -->
      <tarfileset if:set="hasMainResourcesSourcesFolder" dir="${src.main.resources}" prefix="src/main/resources"/>
      <tarfileset if:set="hasTestResourcesSourcesFolder" dir="${src.test.resources}" prefix="src/test/resources"/>

      <!-- IntelliJ IDEA Project (optional)-->
      <tarfileset if:set="isIntelliJIDEAProject" dir=".idea" prefix=".idea" erroronmissingdir="false">
        <include name="inspectionProfiles/profiles_settings.xml"/>
        <include name="inspectionProfiles/Project_Default.xml"/>
        <include name="codeStyleSettings.xml"/>
        <include name="compiler.xml"/>
        <include name="encodings.xml"/>
        <include name="misc.xml"/>
        <include name="modules.xml"/>
        <include name="vcs.xml"/>
        <include name=".name"/>
      </tarfileset>
      <fileset if:set="isIntelliJIDEAProject" dir="${basedir}">
        <include name="*.iml"/>
      </fileset>

      <!-- Eclipse Project (optional)-->
      <filelist if:set="isEclipseProject" dir="${basedir}">
        <file name=".classpath"/>
        <file name=".project"/>
      </filelist>

      <!-- Base Project Assets (required)-->
      <filelist if:set="hasBaseProjectAssets" dir="${basedir}">
        <file name="README.md"/>
        <file name="CHANGELOG.md"/>
      </filelist>

      <!-- Optional Project Assets (optional)-->
      <filelist if:set="hasOptionalProjectAssets" dir="${basedir}">
        <file name="COPYRIGHT.md"/>
        <file name="LICENSE.md"/>
      </filelist>

      <!-- Base Project Development Assets (required)-->
      <filelist if:set="hasBaseProjectDevelopmentAssets" dir="${basedir}">
        <file name=".gitattributes"/>
        <file name=".gitignore"/>
        <file name="build.properties"/>
        <file name="build.xml"/>
      </filelist>

      <!-- Base Odin Project Development Assets (required)-->
      <filelist if:set="hasBaseOdinProjectDevelopmentAssets" dir="${basedir}">
        <file name="odin.json"/>
      </filelist>

      <!-- Optional Odin Project Development Assets (optional)-->
      <filelist if:set="hasOptionalOdinProjectDevelopmentAssets" dir="${basedir}">
        <file name="repository.assk"/>
      </filelist>
    </tar>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.3.2]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble-targz-sources - MD5 Generation                 [2.3.3] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo message="Generating MD5 checksum"/>
    <checksum fileext=".md5">
      <filelist dir="${assembly}/${project.version}">
        <file if:set="assembleSourcesArchive" name="${project.name}-${project.version}-src.tar.gz"/>
      </filelist>
    </checksum>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.3.3]-+ -->
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.3]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Assembly - assemble-targz-repository                                 [2.4] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Assembles the latest version repository archive including all project files.

     @since 0.0.0
     -->
  <target name="assemble-targz-repository" depends="init" description="Assembles the latest version repository archive including all project files">
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble-targz-repository - Generator Configuration     [2.4.0] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <condition property="assembleProjectArchive">
      <istrue value="${config.assembly.generation.archive.project.repository}"/>
    </condition>
    <echo message="Assembling ${project.name} ${project.version}"/>

    <mkdir dir="${assembly}/${project.version}"/>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.4.0]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble-targz-repository - Archive Generation          [2.4.1] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo if:set="assembleProjectArchive" message="Processing files for the Project Repository Archive"/>
    <tar if:set="assembleProjectArchive" destfile="${assembly}/${project.version}/${project.name}-${project.version}-repository.tar.gz" compression="gzip">
      <!-- Project Root -->
      <tarfileset dir="${basedir}" defaultexcludes="false" includes="**/*" excludes="build/**"/>
    </tar>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.4.1]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Assembly - assemble - MD5 Generation                               [2.4.2] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo message="Generating MD5 checksums"/>
    <checksum fileext=".md5">
      <filelist dir="${assembly}/${project.version}">
        <file if:set="assembleProjectArchive" name="${project.name}-${project.version}-repository.tar.gz"/>
      </filelist>
    </checksum>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.4.2]-+ -->
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2.4]-+ -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [2]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Distribution                                                           [3] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Distribution - distribute                                            [3.0] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Distributes the latest assembled version packages.
     It can create multiple packages based on the specified configurations:
       - Binary Version Package Archive
       - Sources Version Package Archive
       - JavaDoc Version Package Archive

     Every assembled package gets a MD5 checksum file.

     @since 0.0.0
     -->
  <target name="distribute" depends="init,assemble,javadoc,sign-assembly-jar,sign-assembly-jar-gpg,sign-assembly-targz-gpg" description="Distributes the latest assembled version packages">
  <fail message="gpg executable not available in system environment PATH">
    <condition>
      <not>
       <available type="file" searchparents="false" file="gpg" filepath="${env.PATH}"/>
     </not>
    </condition>
  </fail>
  <fail message="Assembly folder of latest version not available (${assembly}/${project.version})">
    <condition>
      <not>
       <available type="dir" searchparents="false" file="${assembly}/${project.version}"/>
     </not>
    </condition>
  </fail>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Distribution - distribute - Assembly Consistency Validation        [3.0.0] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <!-- Binary Assembly -->
    <condition property="hasBinaryAssembly">
      <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}.jar"/>
    </condition>

    <!-- Binary Assembly Signature -->
    <condition property="hasBinaryAssemblySignature">
      <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}.jar.asc"/>
    </condition>

    <!-- Sources Assembly -->
    <condition property="hasSourcesAssembly">
      <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}-sources.jar"/>
    </condition>

    <!-- Sources Assembly Signature -->
    <condition property="hasSourcesAssemblySignature">
      <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}-sources.jar.asc"/>
    </condition>

    <!-- JavaDoc Assembly -->
    <condition property="hasJavadocAssembly">
      <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}-javadoc.jar"/>
    </condition>

    <!-- JavaDoc Assembly Signature -->
    <condition property="hasJavadocAssemblySignature">
      <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}-javadoc.jar.asc"/>
    </condition>

    <!-- Source Archive -->
    <condition property="hasSourceArchive">
      <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}-src.tar.gz"/>
    </condition>

    <!-- Source Archive MD5 Checksum -->
    <condition property="hasSourceArchiveMD5Checksum">
      <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}-src.tar.gz.md5"/>
    </condition>

    <!-- Source Archive Signature -->
    <condition property="hasSourceArchiveSignature">
      <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}-src.tar.gz.asc"/>
    </condition>

    <!-- Base Project Assets (required) -->
    <condition property="hasBaseProjectDistributionAssets">
      <and>
        <available type="file" searchparents="false" file="README.md"/>
        <available type="file" searchparents="false" file="CHANGELOG.md"/>
      </and>
    </condition>
    <fail unless:set="hasBaseProjectDistributionAssets" message="No base project assets available"/>

    <!-- Optional Project Assets -->
    <condition property="hasOptionalProjectDistributionAssets">
      <or>
        <available type="file" searchparents="false" file="COPYRIGHT.md"/>
        <available type="file" searchparents="false" file="LICENSE.md"/>
      </or>
    </condition>

    <!-- Base Odin Project Development Assets -->
    <condition property="hasBaseOdinProjectDevelopmentDistributionAssets">
      <and>
        <istrue value="${config.assembly.odin}"/>
        <available type="file" searchparents="false" file="odin.json"/>
      </and>
    </condition>

    <!-- Distribution Folder Configuration -->
    <condition property="hasDistributionFolderConfiguration">
      <isset property="distribution"/>
    </condition>
    <fail unless:set="hasDistributionFolderConfiguration" message="No distribution folder configuration"/>

    <!-- Assembly Dependencies Folder -->
    <condition property="hasAssemblyDependenciesFolder">
      <available type="dir" searchparents="false" file="${assembly}/${project.version}/${assembly.dependencies.prefix}"/>
    </condition>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [3.0.0]-+ -->

    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Distribution - distribute - Generator Configuration                [3.0.1] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <!-- Binary Version Package Archive -->
    <condition property="distributionBinaryArchive">
      <and>
        <istrue value="${config.distribution.generation.binary}"/>
        <isset property="hasBinaryAssembly"/>
      </and>
    </condition>
    <echo unless:set="distributionBinaryArchive" message="Skipping: Binary Version Package Archive Generation${line.separator}" level="info"/>
    <echo unless:set="distributionBinaryArchive" message="  No binary assembly available or disabled generation via configuration"/>

    <!-- Sources Version Package Archive -->
    <condition property="distributionSourcesArchive">
      <and>
        <istrue value="${config.distribution.generation.sources}"/>
        <isset property="hasSourcesAssembly"/>
      </and>
    </condition>
    <echo unless:set="distributionSourcesArchive" message="Skipping: Sources Version Package Archive Generation${line.separator}" level="info"/>
    <echo unless:set="distributionSourcesArchive" message="  No sources assembly available or disabled generation via configuration"/>

    <!-- JavaDoc Version Package Archive -->
    <condition property="distributionJavadocArchive">
      <and>
        <istrue value="${config.distribution.generation.javadoc}"/>
        <isset property="hasJavadocAssembly"/>
      </and>
    </condition>
    <echo unless:set="distributionJavadocArchive" message="Skipping: JavaDoc Version Package Archive Generation${line.separator}" level="info"/>
    <echo unless:set="distributionJavadocArchive" message="  No sources assembly available or disabled generation via configuration"/>

    <mkdir dir="${distribution}/${project.version}"/>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [3.0.1]-+ -->

    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Distribution - distribute - Binary Package Archive Generation      [3.0.2] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo if:set="distributionBinaryArchive" message="Processing files for the Binary Package Archive"/>
    <tar if:set="distributionBinaryArchive" destfile="${distribution}/${project.version}/${project.name}-${project.version}-bin.tar.gz" compression="gzip">

      <!-- Binary Assembly (required)-->
      <filelist if:set="hasBinaryAssembly" dir="${assembly}/${project.version}">
        <file name="${project.name}-${project.version}.jar"/>
        <file name="${project.name}-${project.version}.jar.md5"/>
      </filelist>

      <!-- Binary Assembly Signature (required)-->
      <filelist if:set="hasBinaryAssemblySignature" dir="${assembly}/${project.version}">
        <file name="${project.name}-${project.version}.jar.asc"/>
      </filelist>

      <!-- Assembly Dependencies Folder -->
      <tarfileset if:set="hasAssemblyDependenciesFolder" dir="${assembly}/${project.version}/${assembly.dependencies.prefix}" prefix="${assembly.dependencies.prefix}"/>

      <!-- Base Project Assets (required)-->
      <filelist if:set="hasBaseProjectDistributionAssets" dir="${basedir}">
        <file name="README.md"/>
        <file name="CHANGELOG.md"/>
      </filelist>

      <!-- Optional Project Assets (optional)-->
      <filelist if:set="hasOptionalProjectDistributionAssets" dir="${basedir}">
        <file name="COPYRIGHT.md"/>
        <file name="LICENSE.md"/>
      </filelist>

      <!-- Base Odin Project Development Assets -->
      <filelist if:set="hasBaseOdinProjectDevelopmentDistributionAssets" dir="${basedir}">
        <file name="odin.json"/>
      </filelist>
    </tar>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [3.0.2]-+ -->

    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Distribution - distribute - Sources Package Archive Generation     [3.0.3] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo if:set="distributionSourcesArchive" message="Processing files for the Sources Package Archive"/>
    <tar if:set="distributionSourcesArchive" destfile="${distribution}/${project.version}/${project.name}-${project.version}-sources.tar.gz" compression="gzip">

      <!-- Sources Assembly (required)-->
      <filelist if:set="hasSourcesAssembly" dir="${assembly}/${project.version}">
        <file name="${project.name}-${project.version}-sources.jar"/>
        <file name="${project.name}-${project.version}-sources.jar.md5"/>
      </filelist>

      <!-- Sources Assembly Signature (required)-->
      <filelist if:set="hasSourcesAssemblySignature" dir="${assembly}/${project.version}">
        <file name="${project.name}-${project.version}-sources.jar.asc"/>
      </filelist>

      <!-- Base Project Assets (required)-->
      <filelist if:set="hasBaseProjectDistributionAssets" dir="${basedir}">
        <file name="README.md"/>
        <file name="CHANGELOG.md"/>
      </filelist>

      <!-- Optional Project Assets (optional)-->
      <filelist if:set="hasOptionalProjectDistributionAssets" dir="${basedir}">
        <file name="COPYRIGHT.md"/>
        <file name="LICENSE.md"/>
      </filelist>

      <!-- Base Odin Project Development Assets -->
      <filelist if:set="hasBaseOdinProjectDevelopmentDistributionAssets" dir="${basedir}">
        <file name="odin.json"/>
      </filelist>
    </tar>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [3.0.3]-+ -->

    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Distribution - distribute - JavaDoc Package Archive Generation     [3.0.4] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo if:set="distributionJavadocArchive" message="Processing files for the JavaDoc Package Archive"/>
    <tar if:set="distributionJavadocArchive" destfile="${distribution}/${project.version}/${project.name}-${project.version}-javadoc.tar.gz" compression="gzip">

      <!-- JavaDoc Assembly (required)-->
      <filelist if:set="hasJavadocAssembly" dir="${assembly}/${project.version}">
        <file name="${project.name}-${project.version}-javadoc.jar"/>
        <file name="${project.name}-${project.version}-javadoc.jar.md5"/>
      </filelist>

      <!-- JavaDoc Assembly Signature (required)-->
      <filelist if:set="hasJavadocAssemblySignature" dir="${assembly}/${project.version}">
        <file name="${project.name}-${project.version}-javadoc.jar.asc"/>
      </filelist>

      <!-- Base Project Assets (required)-->
      <filelist if:set="hasBaseProjectDistributionAssets" dir="${basedir}">
        <file name="README.md"/>
        <file name="CHANGELOG.md"/>
      </filelist>

      <!-- Optional Project Assets (optional)-->
      <filelist if:set="hasOptionalProjectDistributionAssets" dir="${basedir}">
        <file name="COPYRIGHT.md"/>
        <file name="LICENSE.md"/>
      </filelist>

      <!-- Base Odin Project Development Assets -->
      <filelist if:set="hasBaseOdinProjectDevelopmentDistributionAssets" dir="${basedir}">
        <file name="odin.json"/>
      </filelist>
    </tar>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [3.0.4]-+ -->

    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Distribution - distribute - Source Archive Copying                 [3.0.5] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo if:set="hasSourceArchive" message="Copying Source Archive"/>
    <copy todir="${distribution}/${project.version}" includeEmptyDirs="false">
      <filelist dir="${assembly}/${project.version}">
        <file if:set="hasSourceArchive" name="${project.name}-${project.version}-src.tar.gz"/>
        <file if:set="hasSourceArchiveMD5Checksum" name="${project.name}-${project.version}-src.tar.gz.md5"/>
        <file if:set="hasSourceArchiveSignature" name="${project.name}-${project.version}-src.tar.gz.asc"/>
      </filelist>
    </copy>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [3.0.5]-+ -->

    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Distribution - distribute - MD5 Generation                         [3.0.6] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo message="Generating MD5 checksums"/>
    <checksum fileext=".md5">
      <filelist dir="${distribution}/${project.version}">
        <file if:set="distributionBinaryArchive" name="${project.name}-${project.version}-bin.tar.gz"/>
        <file if:set="distributionSourcesArchive" name="${project.name}-${project.version}-sources.tar.gz"/>
        <file if:set="distributionJavadocArchive" name="${project.name}-${project.version}-javadoc.tar.gz"/>
      </filelist>
    </checksum>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [3.0.6]-+ -->

    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Distribution - distribute - GPG Signing                            [3.0.7] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <!-- Binary Archive -->
    <echo if:set="distributionBinaryArchive" message="Signing Binary Archive via GnuPG"/>
    <exec if:set="distributionBinaryArchive" executable="gpg">
      <arg value="--output"/>
      <arg value="${distribution}/${project.version}/${project.name}-${project.version}-bin.tar.gz.asc"/>
      <arg value="--armor"/>
      <arg value="--detach-sign"/>
      <arg value="${distribution}/${project.version}/${project.name}-${project.version}-bin.tar.gz"/>
    </exec>

    <!-- Sources Archive -->
    <echo if:set="distributionSourcesArchive" message="Signing Sources Archive via GnuPG"/>
    <exec if:set="distributionSourcesArchive" executable="gpg">
      <arg value="--output"/>
      <arg value="${distribution}/${project.version}/${project.name}-${project.version}-sources.tar.gz.asc"/>
      <arg value="--armor"/>
      <arg value="--detach-sign"/>
      <arg value="${distribution}/${project.version}/${project.name}-${project.version}-sources.tar.gz"/>
    </exec>

    <!-- JavaDoc Archive -->
    <echo if:set="distributionJavadocArchive" message="Signing JavaDoc Archive via GnuPG"/>
    <exec if:set="distributionJavadocArchive" executable="gpg">
      <arg value="--output"/>
      <arg value="${distribution}/${project.version}/${project.name}-${project.version}-javadoc.tar.gz.asc"/>
      <arg value="--armor"/>
      <arg value="--detach-sign"/>
      <arg value="${distribution}/${project.version}/${project.name}-${project.version}-javadoc.tar.gz"/>
    </exec>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [3.0.7]-+ -->
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [3]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Documentation                                                          [4] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Documentation - javadoc                                              [4.0] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Creates the latest version JavaDoc JAR Library file
     and the associated MD5 checksum file.

     @since 0.0.0
     -->
  <target name="javadoc" depends="init" description="Generates JavaDoc for the latest assembled version">
    <!-- Create temporary folder -->
    <mkdir dir="${assembly}/${project.version}/javadoc"/>

    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Documentation - javadoc - JavaDoc Generation                       [4.0.0] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo message="Generating JavaDoc"/>
    <javadoc
      sourcepath="${src.main.java}"
      packagenames="*"
      destdir="${assembly}/${project.version}/javadoc"
      author="true"
      version="true"
      use="true"
      windowtitle="IceCore - Hashids">
      <doctitle><![CDATA[<h1>IceCore - Hashids</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2016 Arctic Ice Studio &lt;development@arcticicestudio.com&gt;</i>]]></bottom>
    </javadoc>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [4.0.0]-+ -->

    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Documentation - javadoc - JavaDoc JAR Generation                   [4.0.1] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo message="Processing files for JavaDoc JAR"/>
    <jar destfile="${assembly}/${project.version}/${project.name}-${project.version}-javadoc.jar">

      <!-- Manifest (required) -->
      <manifest>
        <attribute if:set="hasManifestApplicationInformation" name="Built-By" value="${config.manifest.application.builder}"/>
        <section name="${config.manifest.package.name}">
          <attribute if:set="hasManifestPackageVersionInformation" name="Specification-Title" value="${config.manifest.package.spec.title}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Specification-Version" value="${config.manifest.package.spec.version}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Specification-Vendor" value="${config.manifest.package.spec.vendor}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Implementation-Title" value="${config.manifest.package.impl.title}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Implementation-Version" value="${config.manifest.package.impl.version}"/>
          <attribute if:set="hasManifestPackageVersionInformation" name="Implementation-Vendor" value="${config.manifest.package.impl.vendor}"/>
        </section>
        <attribute if:set="hasManifestThirdPartyEclipseSourceBundle" name="Eclipse-SourceBundle" value="${config.manifest.optional.eclipse.sourcebundle}"/>
      </manifest>

      <fileset dir="${assembly}/${project.version}/javadoc">
        <include name="**/*"/>
      </fileset>
    </jar>
    <delete dir="${assembly}/${project.version}/javadoc"/>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [4.0.1]-+ -->

    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
         + Documentation - javadoc - MD5 Generation                           [4.0.2] +
         +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <echo message="Generating MD5 checksum for JavaDoc JAR"/>
    <checksum fileext=".md5">
      <filelist dir="${assembly}/${project.version}">
        <file name="${project.name}-${project.version}-javadoc.jar"/>
      </filelist>
    </checksum>
    <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [4.0.2]-+ -->
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [4.0]-+ -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [4]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Signing                                                                [5] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Signing - sign-assembly-jar                                          [5.0] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Signs the latest assembled version using the specified Java Keystore and Alias properties
     and creates a signed JAR library including the the associated MD5 checksum file.

     @since 0.0.0
     -->
<target name="sign-assembly-jar" depends="init" description="Signs the latest version and creates a signed JAR library">
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Signing - sign-assembly-jar - JAR Signing                          [5.0.0] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
  <fail message="Assembly folder of latest version not available (${assembly}/${project.version})">
    <condition>
      <not>
       <available type="dir" searchparents="false" file="${assembly}/${project.version}"/>
     </not>
    </condition>
  </fail>
  <fail message="No assembled JAR library available">
    <condition>
      <not>
       <available type="file" file="${assembly}/${project.version}/${project.name}-${project.version}.jar"/>
     </not>
    </condition>
  </fail>
  <fail message="Invalid project signing properties configuration">
    <condition>
      <not>
        <or>
          <isset property="project.signing.alias"/>
          <isset property="project.signing.keystore"/>
          <isset property="project.signing.filename"/>
        </or>
     </not>
    </condition>
  </fail>
  <echo message="Signing JAR library"/>

  <!-- Get the keystore password via secured user input -->
  <input message="Keystore Password:" addproperty="password.keystore">
    <handler classname="org.apache.tools.ant.input.SecureInputHandler" />
  </input>
  <!-- Get the alias password via secured user input -->
  <input message="Alias Password:" addproperty="password.alias">
    <handler classname="org.apache.tools.ant.input.SecureInputHandler" />
  </input>
  <signjar
    jar="${assembly}/${project.version}/${project.name}-${project.version}.jar"
    alias="${project.signing.alias}" keystore="${project.signing.keystore}"
    storepass="${password.keystore}"
    keypass="${password.alias}"
    signedjar="${assembly}/${project.version}/${project.name}-${project.version}-signed.jar"
    sigfile="${project.signing.filename}"
    preservelastmodified="true"/>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [5.0.0]-+ -->

  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
       + Signing - sign-assembly-jar - MD5 Generation                       [5.0.1] +
       +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
  <echo message="Generating MD5 checksum for signed JAR"/>
  <checksum fileext=".md5">
    <filelist dir="${assembly}/${project.version}">
      <file name="${project.name}-${project.version}-signed.jar"/>
    </filelist>
  </checksum>
  <!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [5.0.1]-+ -->
</target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [5.0]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Signing - sign-assembly-jar-gpg                                      [5.1] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Signs the latest assembled version JAR libraries using the OpenPGP client GnuPG.

     @see https://gnupg.org
     @see http://openpgp.org
     @since 0.0.0
     -->
<target name="sign-assembly-jar-gpg" depends="init" description="Signs the latest assembled version using the OpenPGP client GnuPG">
  <fail message="gpg executable not available in system environment PATH">
    <condition>
      <not>
       <available type="file" searchparents="false" file="gpg" filepath="${env.PATH}"/>
     </not>
    </condition>
  </fail>
  <fail message="Assembly folder of latest version not available (${assembly}/${project.version})">
    <condition>
      <not>
       <available type="dir" searchparents="false" file="${assembly}/${project.version}"/>
     </not>
    </condition>
  </fail>

  <!-- Binary Assembly JAR Library -->
  <condition property="hasBinaryAssemblyJARLibrary">
    <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}.jar"/>
  </condition>
  <echo if:set="hasBinaryAssemblyJARLibrary" message="Signing Binary Assembly JAR Library via GnuPG"/>
  <exec if:set="hasBinaryAssemblyJARLibrary" executable="gpg">
    <arg value="--output"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}.jar.asc"/>
    <arg value="--armor"/>
    <arg value="--detach-sign"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}.jar"/>
  </exec>

  <!-- Binary Assembly Signed JAR Library -->
  <condition property="hasBinaryAssemblySignedJARLibrary">
    <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}.jar"/>
  </condition>
  <echo if:set="hasBinaryAssemblySignedJARLibrary" message="Signing Binary Assembly Signed JAR Library via GnuPG"/>
  <exec if:set="hasBinaryAssemblySignedJARLibrary" executable="gpg">
    <arg value="--output"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}-signed.jar.asc"/>
    <arg value="--armor"/>
    <arg value="--detach-sign"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}-signed.jar"/>
  </exec>

  <!-- Sources Assembly JAR Library -->
  <condition property="hasSourcesAssemblyJARLibrary">
    <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}-sources.jar"/>
  </condition>
  <echo if:set="hasSourcesAssemblyJARLibrary" message="Signing Sources Assembly JAR Library via GnuPG"/>
  <exec if:set="hasSourcesAssemblyJARLibrary" executable="gpg">
    <arg value="--output"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}-sources.jar.asc"/>
    <arg value="--armor"/>
    <arg value="--detach-sign"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}-sources.jar"/>
  </exec>

  <!-- JavaDoc Assembly JAR Library -->
  <condition property="hasJavadocAssemblyJARLibrary">
    <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}-javadoc.jar"/>
  </condition>
  <echo if:set="hasJavadocAssemblyJARLibrary" message="Signing JavaDoc Assembly JAR Library via GnuPG"/>
  <exec if:set="hasJavadocAssemblyJARLibrary" executable="gpg">
    <arg value="--output"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}-javadoc.jar.asc"/>
    <arg value="--armor"/>
    <arg value="--detach-sign"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}-javadoc.jar"/>
  </exec>
</target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [5.1]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Signing - sign-assembly-targz-gpg                                    [5.2] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Signs the latest assembled version package archives using the OpenPGP client GnuPG.

     @see https://gnupg.org
     @see http://openpgp.org
     @since 0.0.0
     -->
<target name="sign-assembly-targz-gpg" depends="init" description="Signs the latest assembled version package archives using the OpenPGP client GnuPG">
  <fail message="gpg executable not available in system environment PATH">
    <condition>
      <not>
       <available type="file" searchparents="false" file="gpg" filepath="${env.PATH}"/>
     </not>
    </condition>
  </fail>
  <fail message="Assembly folder of latest version not available (${assembly}/${project.version})">
    <condition>
      <not>
       <available type="dir" searchparents="false" file="${assembly}/${project.version}"/>
     </not>
    </condition>
  </fail>

  <!-- Project Repository Archive -->
  <condition property="hasProjectRepositoryArchive">
    <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}-repository.tar.gz"/>
  </condition>
  <echo if:set="hasProjectRepositoryArchive" message="Signing Project Repository Archive via GnuPG"/>
  <exec if:set="hasProjectRepositoryArchive" executable="gpg">
    <arg value="--output"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}-repository.tar.gz.asc"/>
    <arg value="--armor"/>
    <arg value="--detach-sign"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}-repository.tar.gz"/>
  </exec>

  <!-- Project Repository Archive -->
  <condition property="hasProjectSourcesArchive">
    <available type="file" searchparents="false" file="${assembly}/${project.version}/${project.name}-${project.version}-src.tar.gz"/>
  </condition>
  <echo if:set="hasProjectSourcesArchive" message="Signing Project Sources Archive via GnuPG"/>
  <exec if:set="hasProjectSourcesArchive" executable="gpg">
    <arg value="--output"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}-src.tar.gz.asc"/>
    <arg value="--armor"/>
    <arg value="--detach-sign"/>
    <arg value="${assembly}/${project.version}/${project.name}-${project.version}-src.tar.gz"/>
  </exec>
</target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [5.2]-+ -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [5]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Building                                                               [6] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Building - build                                                     [6.0] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Builds the main java sources and copies all main resources and assets
     to the specified main build folders.

     @since 0.0.0
     -->
  <target name="build" depends="init,copy-resources,copy-native,copy-assets" description="Builds the main java sources">
    <fail message="Necessary properties are unset">
      <condition>
        <not>
          <and>
            <isset property="src.main.java"/>
            <isset property="build.main.java"/>
          </and>
        </not>
      </condition>
    </fail>
    <fail message="main sources folder no available: (${src.main.java})">
      <condition>
        <not>
          <available type="dir" searchparents="false" file="${src.main.java}"/>
        </not>
      </condition>
    </fail>
    <mkdir dir="${build.main.java}" />
    <echo message="Building main java sources"/>
    <javac srcdir="${src.main.java}" destdir="${build.main.java}" includeantruntime="false">
      <classpath refid="classpath.main" />
    </javac>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [6.0]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Building - build-test                                                [6.1] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Builds the test java sources and copies all test resources and assets
     to the specified test build folders.

     @since 0.0.0
     -->
  <target name="build-test" depends="init,copy-test-resources,copy-test-native,copy-test-assets" description="Builds the test java sources">
    <fail message="Necessary properties are unset">
      <condition>
        <not>
          <and>
            <isset property="src.test.java"/>
            <isset property="build.test.java"/>
          </and>
        </not>
      </condition>
    </fail>
    <fail message="test sources folder no available: (${src.test.java})">
      <condition>
        <not>
          <available type="dir" searchparents="false" file="${src.test.java}"/>
        </not>
      </condition>
    </fail>
    <mkdir dir="${build.test.java}" />
    <echo message="Building test java sources"/>
    <javac srcdir="${src.test.java}" destdir="${build.test.java}" includeantruntime="false">
      <classpath refid="classpath.test" />
    </javac>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [6.1]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Building - build-scratch                                             [6.2] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Builds the scratch java sources and copies all scratch resources and assets
     to the specified scratch build folders.

     @since 0.0.0
     -->
  <target name="build-scratch" depends="init,copy-scratch-resources,copy-scratch-native,copy-scratch-assets" description="Builds the scratch java sources">
    <fail message="Necessary properties are unset">
      <condition>
        <not>
          <and>
            <isset property="src.scratch.java"/>
            <isset property="build.scratch.java"/>
          </and>
        </not>
      </condition>
    </fail>
    <fail message="scratch sources folder no available: (${src.scratch.java})">
      <condition>
        <not>
          <available type="dir" searchparents="false" file="${src.scratch.java}"/>
        </not>
      </condition>
    </fail>
    <mkdir dir="${build.scratch.java}" />
    <echo message="Building scratch java sources"/>
    <javac srcdir="${src.scratch.java}" destdir="${build.scratch.java}" includeantruntime="false">
      <classpath refid="classpath.scratch" />
    </javac>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [6.2]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Building - rebuild                                                   [6.3] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Rebuilds the main java sources and copies all main resources and assets
     to the specified main build folders.
     This is a collection task which calls dependent tasks in a specific order.

     @since 0.0.0
     -->
  <target name="rebuild" depends="init,clean,build" description="Rebuilds the cleaned main java sources">
    <echo message="Rebuilding cleaned main java sources"/>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [6.3]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Building - rebuild-test                                              [6.4] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Rebuilds the test java sources and copies all test resources and assets
     to the specified test build folders.
     This is a collection task which calls dependent tasks in a specific order.

     @since 0.0.0
     -->
  <target name="rebuild-test" depends="init,clean-test-java,build-test" description="Rebuilds the cleaned test java sources">
    <echo message="Rebuilding cleaned test java sources"/>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [6.4]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Building - rebuild-scratch                                           [6.5] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Rebuilds the test java sources and copies all test resources and assets
     to the specified test build folders.
     This is a collection task which calls dependent tasks in a specific order.

     @since 0.0.0
     -->
  <target name="rebuild-scratch" depends="init,clean-scratch-java,build-scratch" description="Rebuilds the cleaned scratch java sources">
    <echo message="Rebuilding cleaned scratch java sources"/>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [6.5]-+ -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [6]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Copying                                                                [7] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Copying - copy-dependencies                                          [7.0] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Copies all main JAR library dependencies to the assembly dependencies folder
     defined by the "assembly.dependencies.prefix" configuration property.

     @since 0.0.0
     -->
  <target name="copy-dependencies" depends="init" description="Copies all main JAR library dependencies to the specified path">
    <!-- Property Validation -->
    <condition property="hasLibraryConfiguration">
      <and>
        <isset property="lib.main.java"/>
        <isset property="lib.main.java.vendor"/>
        <available type="dir" searchparents="false" file="${lib.main.java}"/>
        <available type="dir" searchparents="false" file="${lib.main.java.vendor}"/>
      </and>
    </condition>
    <fail unless:set="hasLibraryConfiguration" message="No library folder available or invalid configuration"/>

    <echo message="Copying all main JAR library dependencies to ${assembly}/${project.version}/${assembly.dependencies.prefix}"/>
    <mkdir dir="${assembly}/${project.version}/${assembly.dependencies.prefix}" />
    <copy todir="${assembly}/${project.version}/${assembly.dependencies.prefix}" includeEmptyDirs="false">
      <fileset dir="${lib.main.java}">
        <include name="**/*.jar"/>
        <exclude name="**/*sources.jar"/>
        <exclude name="**/*javadoc.jar"/>
      </fileset>
      <fileset dir="${lib.main.java.vendor}">
        <include name="**/*.jar"/>
        <exclude name="**/*sources.jar"/>
        <exclude name="**/*javadoc.jar"/>
      </fileset>
    </copy>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [7.0]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Copying - copy-resources                                             [7.1] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Copies all main resources to the main build folder.

     @since 0.0.0
     -->
  <target name="copy-resources" depends="init" description="Copies all main resources to the main build folder">
    <condition property="hasMainResourcesConfiguration">
      <and>
        <isset property="src.main.resources"/>
        <isset property="build.main.resources"/>
        <available type="dir" searchparents="false" file="${src.main.resources}"/>
      </and>
    </condition>
    <echo if:set="hasMainResourcesConfiguration" message="Copying main resources to main resources build folder"/>
    <echo unless:set="hasMainResourcesConfiguration" message="Skipping:${line.separator}  Main resources not configured"/>
    <mkdir if:set="hasMainResourcesConfiguration" dir="${build.main.resources}" />
    <copy if:set="hasMainResourcesConfiguration" todir="${build.main.resources}">
      <fileset dir="${src.main.resources}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [7.1]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Copying - copy-native                                                [7.2] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Copies all main natives to the main build folder.

     @since 0.0.0
     -->
  <target name="copy-native" depends="init" description="Copies all main natives to the main build folder">
    <condition property="hasMainNativeConfiguration">
      <and>
        <isset property="src.main.native"/>
        <isset property="build.main.native"/>
        <available type="dir" searchparents="false" file="${src.main.native}"/>
      </and>
    </condition>
    <echo if:set="hasMainNativeConfiguration" message="Copying main natives to main natives build folder"/>
    <echo unless:set="hasMainNativeConfiguration" message="Skipping:${line.separator}  Main natives not configured"/>
    <mkdir if:set="hasMainNativeConfiguration" dir="${build.main.native}" />
    <copy if:set="hasMainNativeConfiguration" todir="${build.main.native}">
      <fileset dir="${src.main.native}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [7.2]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Copying - copy-assets                                                [7.3] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Copies all main assets to the main build folder.

     @since 0.0.0
     -->
  <target name="copy-assets" depends="init" description="Copies all main assets to the main build folder">
    <condition property="hasMainAssetsConfiguration">
      <and>
        <isset property="src.main.assets"/>
        <isset property="build.main.assets"/>
        <available type="dir" searchparents="false" file="${src.main.assets}"/>
      </and>
    </condition>
    <echo if:set="hasMainAssetsConfiguration" message="Copying main assets to main assets build folder"/>
    <echo unless:set="hasMainAssetsConfiguration" message="Skipping:${line.separator}  Main assets not configured"/>
    <mkdir if:set="hasMainAssetsConfiguration" dir="${build.main.assets}" />
    <copy if:set="hasMainAssetsConfiguration" todir="${build.main.assets}">
      <fileset dir="${src.main.assets}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [7.3]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Copying - copy-test-resources                                        [7.4] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Copies all test resources to the test resources build folder.

     @since 0.0.0
     -->
  <target name="copy-test-resources" depends="init" description="Copies all test resources to the test resources build folder">
    <condition property="hasTestResourcesConfiguration">
      <and>
        <isset property="src.test.resources"/>
        <isset property="build.test.resources"/>
        <available type="dir" searchparents="false" file="${src.test.resources}"/>
      </and>
    </condition>
    <echo if:set="hasTestResourcesConfiguration" message="Copying test resources to test resources build folder"/>
    <echo unless:set="hasTestResourcesConfiguration" message="Skipping:${line.separator}  Test resources not configured"/>
    <mkdir if:set="hasTestResourcesConfiguration" dir="${build.test.resources}" />
    <copy if:set="hasTestResourcesConfiguration" todir="${build.test.resources}">
      <fileset dir="${src.test.resources}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [7.4]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Copying - copy-test-native                                           [7.5] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Copies all test resources to the test build folder.

     @since 0.0.0
     -->
  <target name="copy-test-native" depends="init" description="Copies all test natives to the test build folder">
    <condition property="hasTestNativeConfiguration">
      <and>
        <isset property="src.test.native"/>
        <isset property="build.test.native"/>
        <available type="dir" searchparents="false" file="${src.test.native}"/>
      </and>
    </condition>
    <echo if:set="hasTestNativeConfiguration" message="Copying test natives to test natives build folder"/>
    <echo unless:set="hasTestNativeConfiguration" message="Skipping:${line.separator}  Main natives not configured"/>
    <mkdir if:set="hasTestNativeConfiguration" dir="${build.test.native}" />
    <copy if:set="hasTestNativeConfiguration" todir="${build.test.native}">
      <fileset dir="${src.test.native}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [7.5]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Copying - copy-test-assets                                           [7.6] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Copies all test assets to the test build folder.

     @since 0.0.0
     -->
  <target name="copy-test-assets" depends="init" description="Copies all test assets to the test build folder">
    <condition property="hasTestAssetsConfiguration">
      <and>
        <isset property="src.test.assets"/>
        <isset property="build.test.assets"/>
        <available type="dir" searchparents="false" file="${src.test.assets}"/>
      </and>
    </condition>
    <echo if:set="hasTestAssetsConfiguration" message="Copying test assets to test assets build folder"/>
    <echo unless:set="hasTestAssetsConfiguration" message="Skipping:${line.separator}  Main assets not configured"/>
    <mkdir if:set="hasTestAssetsConfiguration" dir="${build.test.assets}" />
    <copy if:set="hasTestAssetsConfiguration" todir="${build.test.assets}">
      <fileset dir="${src.test.assets}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [7.6]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Copying - copy-scratch-resources                                     [7.7] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Copies all scratch resources to the scratch resources build folder.

     @since 0.0.0
     -->
  <target name="copy-scratch-resources" depends="init" description="Copies all scratch resources to the scratch resources build folder">
    <condition property="hasScratchResourcesConfiguration">
      <and>
        <isset property="src.scratch.resources"/>
        <isset property="build.scratch.resources"/>
        <available type="dir" searchparents="false" file="${src.scratch.resources}"/>
      </and>
    </condition>
    <echo if:set="hasScratchResourcesConfiguration" message="Copying scratch resources to scratch resources build folder"/>
    <echo unless:set="hasScratchResourcesConfiguration" message="Skipping:${line.separator}  Scratch resources not configured"/>
    <mkdir if:set="hasScratchResourcesConfiguration" dir="${build.scratch.resources}" />
    <copy if:set="hasScratchResourcesConfiguration" todir="${build.scratch.resources}">
      <fileset dir="${src.scratch.resources}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [7.7]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Copying - copy-scratch-native                                        [7.8] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Copies all scratch natives to the main build folder.

     @since 0.0.0
     -->
  <target name="copy-scratch-native" depends="init" description="Copies all scratch natives to the scratch build folder">
    <condition property="hasScratchNativeConfiguration">
      <and>
        <isset property="src.scratch.native"/>
        <isset property="build.scratch.native"/>
        <available type="dir" searchparents="false" file="${src.scratch.native}"/>
      </and>
    </condition>
    <echo if:set="hasScratchNativeConfiguration" message="Copying scratch natives to scratch natives build folder"/>
    <echo unless:set="hasScratchNativeConfiguration" message="Skipping:${line.separator}  Main natives not configured"/>
    <mkdir if:set="hasScratchNativeConfiguration" dir="${build.scratch.native}" />
    <copy if:set="hasScratchNativeConfiguration" todir="${build.scratch.native}">
      <fileset dir="${src.scratch.native}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [7.8]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Copying - copy-scratch-assets                                        [7.9] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Copies all scratch assets to the scratch build folder.

     @since 0.0.0
     -->
  <target name="copy-scratch-assets" depends="init" description="Copies all scratch assets to the scratch build folder">
    <condition property="hasScratchAssetsConfiguration">
      <and>
        <isset property="src.scratch.assets"/>
        <isset property="build.scratch.assets"/>
        <available type="dir" searchparents="false" file="${src.scratch.assets}"/>
      </and>
    </condition>
    <echo if:set="hasScratchAssetsConfiguration" message="Copying scratch assets to scratch assets build folder"/>
    <echo unless:set="hasScratchAssetsConfiguration" message="Skipping:${line.separator}  Main assets not configured"/>
    <mkdir if:set="hasScratchAssetsConfiguration" dir="${build.scratch.assets}" />
    <copy if:set="hasScratchAssetsConfiguration" todir="${build.scratch.assets}">
      <fileset dir="${src.scratch.assets}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [7.9]-+ -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [7]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Testing                                                                [8] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Testing - test-java-junit                                            [8.0] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Runs all JUnit java tests.

     @see http://junit.org
     @since 0.0.0
     -->
  <target name="test-java-junit" depends="rebuild,rebuild-test">
    <fail message="Necessary properties are unset">
      <condition>
        <not>
          <and>
            <isset property="src.test.java"/>
            <isset property="build.test.java.reports.junit"/>
          </and>
        </not>
      </condition>
    </fail>
    <mkdir dir="${build.test.java.reports.junit}" />
    <junit printsummary="yes" haltonfailure="no">
      <!-- Set the classpath -->
      <classpath refid="classpath.test" />
      <!-- Configure the output formatter -->
      <formatter type="plain" />
      <formatter type="xml" />
      <!-- Run all test sources -->
      <batchtest fork="yes" todir="${build.test.java.reports.junit}">
        <fileset dir="${src.test.java}">
          <include name="**/*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [8.0]-+ -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [8]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning                                                               [9] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-all                                                 [9.0] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
    <!--
    Cleans the base build folder.

    @since 0.0.0
   -->
  <target name="clean-all" depends="init" description="Cleans the base build folder">
    <condition property="hasBaseBuildFolder">
      <available type="dir" searchparents="false" file="${build.base}"/>
    </condition>
    <echo if:set="hasBaseBuildFolder" message="Cleaning the base build folder: ${build.base}"/>
    <echo unless:set="hasBaseBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.base})"/>
    <delete if:set="hasBaseBuildFolder" includeemptydirs="true">
      <fileset dir="${build.base}"/>
    </delete>
 </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [9.0]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean                                                     [9.1] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the base main build folder including all main java classes,
     native binaries, main resources and main assets.

     @since 0.0.0
     -->
  <target name="clean" depends="init" description="Cleans the base main build folder">
    <condition property="hasBaseMainBuildFolder">
      <available type="dir" searchparents="false" file="${build.base.main}"/>
    </condition>
    <echo if:set="hasBaseMainBuildFolder" message="Cleaning base main build folder: ${build.base.main}"/>
    <echo unless:set="hasBaseMainBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.base.main})"/>
    <delete if:set="hasBaseMainBuildFolder" includeemptydirs="true">
      <fileset dir="${build.base.main}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [9.1]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-java                                                [9.2] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the main java build folder.

     @since 0.0.0
     -->
  <target name="clean-java" depends="init" description="Cleans the main java build folder">
    <condition property="hasMainJavaBuildFolder">
      <available type="dir" searchparents="false" file="${build.main.java}"/>
    </condition>
    <echo if:set="hasMainJavaBuildFolder" message="Cleaning main java build folder: ${build.main.java}"/>
    <echo unless:set="hasMainJavaBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.main.java})"/>
    <delete if:set="hasMainJavaBuildFolder" includeemptydirs="true">
      <fileset dir="${build.main.java}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [9.2]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-native                                              [9.3] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the main native build folder.

     @since 0.0.0
     -->
  <target name="clean-native" depends="init" description="Cleans the main native build folder">
    <condition property="hasMainNativeBuildFolder">
      <available type="dir" searchparents="false" file="${build.main.native}"/>
    </condition>
    <echo if:set="hasMainNativeBuildFolder" message="Cleaning main native build folder: ${build.main.native}"/>
    <echo unless:set="hasMainNativeBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.main.native})"/>
    <delete if:set="hasMainNativeBuildFolder" includeemptydirs="true">
      <fileset dir="${build.main.native}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [9.3]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-resources                                           [9.4] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the main resources build folder.

     @since 0.0.0
     -->
  <target name="clean-resources" depends="init" description="Cleans the main resources build folder">
    <condition property="hasMainResourcesBuildFolder">
      <available type="dir" searchparents="false" file="${build.main.resources}"/>
    </condition>
    <echo if:set="hasMainResourcesBuildFolder" message="Cleaning main resources build folder: ${build.main.resources}"/>
    <echo unless:set="hasMainResourcesBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.main.resources})"/>
    <delete if:set="hasMainResourcesBuildFolder" includeemptydirs="true">
      <fileset dir="${build.main.resources}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [9.4]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-assets                                             [10.5] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the main assets build folder.

     @since 0.0.0
     -->
  <target name="clean-assets" depends="init" description="Cleans the main assets build folder">
    <condition property="hasMainAssetsBuildFolder">
      <available type="dir" searchparents="false" file="${build.main.assets}"/>
    </condition>
    <echo if:set="hasMainAssetsBuildFolder" message="Cleaning main assets build folder: ${build.main.assets}"/>
    <echo unless:set="hasMainAssetsBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.main.assets})"/>
    <delete if:set="hasMainAssetsBuildFolder" includeemptydirs="true">
      <fileset dir="${build.main.assets}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [9.5]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-test                                                [9.6] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the base test build folder including all test java classes,
     native binaries, test resources and test assets.

     @since 0.0.0
     -->
  <target name="clean-test" depends="init" description="Cleans the base test build folder">
    <condition property="hasBaseTestBuildFolder">
      <available type="dir" searchparents="false" file="${build.base.test}"/>
    </condition>
    <echo if:set="hasBaseTestBuildFolder" message="Cleaning base test build folder: ${build.base.test}"/>
    <echo unless:set="hasBaseTestBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.base.test})"/>
    <delete if:set="hasBaseTestBuildFolder" includeemptydirs="true">
      <fileset dir="${build.base.test}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [9.6]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-test-java                                           [9.7] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the test java build folder.

     @since 0.0.0
     -->
  <target name="clean-test-java" depends="init" description="Cleans the test java build folder">
    <condition property="hasTestJavaBuildFolder">
      <available type="dir" searchparents="false" file="${build.test.java}"/>
    </condition>
    <echo if:set="hasTestJavaBuildFolder" message="Cleaning test java build folder: ${build.test.java}"/>
    <echo unless:set="hasTestJavaBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.test.java})"/>
    <delete if:set="hasTestJavaBuildFolder" includeemptydirs="true">
      <fileset dir="${build.test.java}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [9.7]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-test-native                                         [9.8] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the test native build folder.

     @since 0.0.0
     -->
  <target name="clean-test-native" depends="init" description="Cleans the test native build folder">
    <condition property="hasTestNativeBuildFolder">
      <available type="dir" searchparents="false" file="${build.test.native}"/>
    </condition>
    <echo if:set="hasTestNativeBuildFolder" message="Cleaning test native build folder: ${build.test.native}"/>
    <echo unless:set="hasTestNativeBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.test.native})"/>
    <delete if:set="hasTestNativeBuildFolder" includeemptydirs="true">
      <fileset dir="${build.test.native}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [9.8]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-test-resources                                      [9.9] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the test resources build folder.

     @since 0.0.0
     -->
  <target name="clean-test-resources" depends="init" description="Cleans the test resources build folder">
    <condition property="hasTestResourcesBuildFolder">
      <available type="dir" searchparents="false" file="${build.test.resources}"/>
    </condition>
    <echo if:set="hasTestResourcesBuildFolder" message="Cleaning test resources build folder: ${build.test.resources}"/>
    <echo unless:set="hasTestResourcesBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.test.resources})"/>
    <delete if:set="hasTestResourcesBuildFolder" includeemptydirs="true">
      <fileset dir="${build.test.resources}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [9.9]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-test-assets                                        [9.10] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the test assets build folder.

     @since 0.0.0
     -->
  <target name="clean-test-assets" depends="init" description="Cleans the test assets build folder">
    <condition property="hasTestAssetsBuildFolder">
      <available type="dir" searchparents="false" file="${build.test.assets}"/>
    </condition>
    <echo if:set="hasTestAssetsBuildFolder" message="Cleaning test assets build folder: ${build.test.assets}"/>
    <echo unless:set="hasTestAssetsBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.test.assets})"/>
    <delete if:set="hasTestAssetsBuildFolder" includeemptydirs="true">
      <fileset dir="${build.test.assets}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -[9.10]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-scratch                                            [9.11] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the base scratch build folder including all scratch java classes,
     native binaries, scratch resources and scratch assets.

     @since 0.0.0
     -->
  <target name="clean-scratch" depends="init" description="Cleans the base scratch build folder">
    <condition property="hasBaseScratchBuildFolder">
      <available type="dir" searchparents="false" file="${build.base.scratch}"/>
    </condition>
    <echo if:set="hasBaseScratchBuildFolder" message="Cleaning base scratch build folder: ${build.base.scratch}"/>
    <echo unless:set="hasBaseScratchBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.base.scratch})"/>
    <delete if:set="hasBaseScratchBuildFolder" includeemptydirs="true">
      <fileset dir="${build.base.scratch}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -[9.11]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-scratch-java                                       [9.12] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the scratch java build folder.

     @since 0.0.0
     -->
  <target name="clean-scratch-java" depends="init" description="Cleans the scratch java build folder">
    <condition property="hasScratchJavaBuildFolder">
      <available type="dir" searchparents="false" file="${build.scratch.java}"/>
    </condition>
    <echo if:set="hasScratchJavaBuildFolder" message="Cleaning scratch java build folder: ${build.scratch.java}"/>
    <echo unless:set="hasScratchJavaBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.scratch.java})"/>
    <delete if:set="hasScratchJavaBuildFolder" includeemptydirs="true">
      <fileset dir="${build.scratch.java}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -[9.12]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-scratch-native                                     [9.13] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the scratch native build folder.

     @since 0.0.0
     -->
  <target name="clean-scratch-native" depends="init" description="Cleans the scratch native build folder">
    <condition property="hasScratchNativeBuildFolder">
      <available type="dir" searchparents="false" file="${build.scratch.native}"/>
    </condition>
    <echo if:set="hasScratchNativeBuildFolder" message="Cleaning scratch native build folder: ${build.scratch.native}"/>
    <echo unless:set="hasScratchNativeBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.scratch.native})"/>
    <delete if:set="hasScratchNativeBuildFolder" includeemptydirs="true">
      <fileset dir="${build.scratch.native}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -[9.13]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-scratch-resources                                  [9.14] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the scratch resources build folder.

     @since 0.0.0
     -->
  <target name="clean-scratch-resources" depends="init" description="Cleans the scratch resources build folder">
    <condition property="hasScratchResourcesBuildFolder">
      <available type="dir" searchparents="false" file="${build.scratch.resources}"/>
    </condition>
    <echo if:set="hasScratchResourcesBuildFolder" message="Cleaning scratch resources build folder: ${build.scratch.resources}"/>
    <echo unless:set="hasScratchResourcesBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.scratch.resources})"/>
    <delete if:set="hasScratchResourcesBuildFolder" includeemptydirs="true">
      <fileset dir="${build.scratch.resources}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -[9.14]-+ -->

<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     + Cleaning - clean-scratch-assets                                     [9.15] +
     +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + -->
     <!--
     Cleans the scratch assets build folder.

     @since 0.0.0
     -->
  <target name="clean-scratch-assets" depends="init" description="Cleans the scratch assets build folder">
    <condition property="hasScratchAssetsBuildFolder">
      <available type="dir" searchparents="false" file="${build.scratch.assets}"/>
    </condition>
    <echo if:set="hasScratchAssetsBuildFolder" message="Cleaning scratch assets build folder: ${build.scratch.assets}"/>
    <echo unless:set="hasScratchAssetsBuildFolder" message="Skipping:${line.separator}  Build folder not available (${build.scratch.assets})"/>
    <delete if:set="hasScratchAssetsBuildFolder" includeemptydirs="true">
      <fileset dir="${build.scratch.assets}"/>
    </delete>
  </target>
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -[9.15]-+ -->
<!-- +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [9]-+ -->
</project>
